# -*- coding: utf-8 -*-
"""Graffiti_vs_nograffiti_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BCe5A1k13-ofFh6YigfVFTcP3qSBXE-9
"""

#Instantiating a small convnet for grafiti vs. no-grafiti classification

from keras import layers
from keras import models
from keras import optimizers
from keras.preprocessing.image import ImageDataGenerator

#model
model = models.Sequential()
model.add(layers.Conv2D(32, (3, 3), activation = 'relu', input_shape = (224, 224, 3)))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(64, (3, 3), activation = 'relu'))
model.add(layers.MaxPooling2D((2,2)))
model.add(layers.Conv2D(128, (3, 3), activation = 'relu'))
model.add(layers.MaxPooling2D((2,2)))
model.add(layers.Conv2D(128, (3, 3), activation = 'relu'))
model.add(layers.MaxPooling2D((2,2)))
model.add(layers.Flatten())
model.add(layers.Dense(512, activation = 'relu'))
model.add(layers.Dense(1, activation = 'sigmoid'))


#Configuring the model for training
model.compile(loss = 'binary_crossentropy',
              optimizer = optimizers.RMSprop(learning_rate=1e-4),
              metrics = ['acc'])


#Data preprocessing
train_datagen = ImageDataGenerator(rescale = 1./255)
test_datagen = ImageDataGenerator(rescale = 1./255)

train_generator = train_datagen.flow_from_directory(
    '/content/drive/MyDrive/graffiti_dataset/train',
    target_size = (150, 150),
    batch_size = 20,
    class_mode = 'binary'
)

validation_generator = test_datagen.flow_from_directory(
    '/content/drive/MyDrive/graffiti_dataset/validation',
    target_size = (150, 150),
    batch_size = 20,
    class_mode = 'binary'
)

#fitting the model using a batch generator

history = model.fit(
    train_generator,
    steps_per_epoch = 18,
    epochs = 20,
    validation_data = validation_generator,
    validation_steps = 6
)

model.save('graffiti_vs_nograffiti_1.h5')

#Displaying curves of loss and accuracy during training

import matplotlib.pyplot as plt
acc = history.history['acc']
val_acc = history.history['val_acc']
loss = history.history['loss']
val_loss = history.history['val_loss']
epochs = range(1, len(acc) + 1)
plt.plot(epochs, acc, 'bo', label='Training acc')
plt.plot(epochs, val_acc, 'b', label='Validation acc')
plt.title('Training and validation accuracy')
plt.legend()
plt.figure()
plt.plot(epochs, loss, 'bo', label='Training loss')
plt.plot(epochs, val_loss, 'b', label='Validation loss')
plt.title('Training and validation loss')
plt.legend()
plt.show()

#test
test_generator = test_datagen.flow_from_directory(
  '/content/drive/MyDrive/graffiti_dataset/test',
  target_size=(150, 150),
  batch_size=20,
  class_mode='binary')
test_loss, test_acc = model.evaluate(test_generator, steps=6)
print('test acc:', test_acc)

#Instantiating a small convnet for grafiti vs. no-grafiti classification

from keras import layers
from keras import models
from keras import optimizers
from keras.preprocessing.image import ImageDataGenerator

#model
model = models.Sequential()
model.add(layers.Conv2D(32, (3, 3), activation = 'relu', input_shape = (224, 224, 3)))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(64, (3, 3), activation = 'relu'))
model.add(layers.MaxPooling2D((2,2)))
model.add(layers.Conv2D(128, (3, 3), activation = 'relu'))
model.add(layers.MaxPooling2D((2,2)))
model.add(layers.Conv2D(128, (3, 3), activation = 'relu'))
model.add(layers.MaxPooling2D((2,2)))
model.add(layers.Flatten())
model.add(layers.Dense(512, activation = 'relu'))
model.add(layers.Dense(1, activation = 'sigmoid'))


#Configuring the model for training
model.compile(loss = 'binary_crossentropy',
              optimizer = optimizers.RMSprop(learning_rate=1e-4),
              metrics = ['acc'])


#Data preprocessing
train_datagen = ImageDataGenerator(rescale = 1./255)
test_datagen = ImageDataGenerator(rescale = 1./255)

train_generator = train_datagen.flow_from_directory(
    '/content/drive/MyDrive/GraffitiDataset/train_dir',
    target_size = (224, 224),
    batch_size = 32,
    class_mode = 'binary'
)

validation_generator = test_datagen.flow_from_directory(
    '/content/drive/MyDrive/GraffitiDataset/validation_dir',
    target_size = (224, 224),
    batch_size = 32,
    class_mode = 'binary'
)


#fitting the model using a batch generator
history = model.fit(
    train_generator,
    steps_per_epoch = 22,
    epochs = 30,
    validation_data = validation_generator,
    validation_steps = 4
)

model.save('graffiti_vs_nograffiti_1.h5')

#plotting the training and validation loss

import matplotlib.pyplot as plt

history_dict = history.history
loss_values = history_dict['loss']
val_loss_values = history_dict['val_loss']
acc_values = history.history['acc']
val_acc_values = history.history['val_acc']

epochs = range(1, len(loss_values) + 1)

plt.plot(epochs, loss_values, 'bo', label = 'Training loss')
plt.plot(epochs, val_loss_values, 'b', label = 'Validation loss')
plt.title('Training and validation loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()


plt.plot(epochs, acc_values, 'bo', label = 'Training acc')
plt.plot(epochs, val_acc_values, 'b', label = 'Validation acc')
plt.title('Training and validation accuracy')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()

plt.show()